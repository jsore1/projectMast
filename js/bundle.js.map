{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://project-mast/./js/modules/image.js","webpack://project-mast/./js/modules/modal.js","webpack://project-mast/./js/modules/render.js","webpack://project-mast/./js/modules/slider.js","webpack://project-mast/./js/script.js","webpack://project-mast/./js/modules/requests.js","webpack://project-mast/./js/modules/clickTriggers.js"],"sourcesContent":["function createImage(src, inner) {\r\n    return new Promise((resolve, reject) => {\r\n        const imgDiv = document.createElement(\"div\");\r\n        imgDiv.classList.add('modal__image-card');\r\n        inner.prepend(imgDiv);\r\n        const image = document.createElement(\"img\");\r\n        image.onload = () => resolve(image);\r\n        image.classList.add('modal__img');\r\n        imgDiv.prepend(image);\r\n        image.setAttribute(\"src\", src);\r\n    });\r\n}\r\n\r\nfunction clearImages() {\r\n    const modalImageCards = document.querySelectorAll(\".modal__image-card\");\r\n    modalImageCards.forEach((card) => {\r\n        card.remove();\r\n    });\r\n}\r\n\r\nexport {createImage, clearImages};","// Функция, которая открывает модальное окно\r\nfunction openModal(modalSelector) {\r\n    document.querySelector(modalSelector).classList.add('show');\r\n}\r\n\r\n// Функция, которая закрывает модальное окно\r\nfunction closeModal(modalSelector) {\r\n    document.querySelector(modalSelector).classList.remove('show');\r\n    document.querySelector(\".modal__image-inner\").style.transition = \"none\";\r\n}\r\n\r\nexport {openModal, closeModal};","import slider from './slider';\r\nimport {createImage, clearImages} from './image';\r\nimport {openModal} from './modal';\r\n\r\nfunction renderPoints(pointsArray, planSelector){\r\n    if (pointsArray.length > 0) {\r\n        const plan = document.querySelector(planSelector);\r\n        pointsArray.forEach((point) => {\r\n            plan.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"plan__point\" style=\"top: ${point.y}px;left: ${point.x}px\" data-id=\"${point.id}\">\r\n                    ${point.name}\r\n                </div>`\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nfunction renderImageModal(pointsArray, pointId, imagesArray) {\r\n    const modalText = document.querySelector(\".modal__text\"),\r\n          modalTitle = document.querySelector(\".modal__title\"),\r\n          modalDate = document.querySelector(\".modal__date\"),\r\n          modalImageInner = document.querySelector(\".modal__image-inner\"),\r\n          nextButton = document.querySelector(\".modal__next\"),\r\n          backButton = document.querySelector(\".modal__back\"),\r\n          loader = document.querySelector(\".loader\"),\r\n          imagesPromiseArray = [];\r\n\r\n    clearImages();\r\n    modalText.classList.add(\"hide\");\r\n    modalTitle.textContent = pointsArray[pointId-1].title;\r\n    modalDate.textContent = imagesArray[0].description;\r\n    modalImageInner.style.width = `${imagesArray.length * 100}%`;\r\n    loader.classList.add(\"show\");\r\n    if (imagesArray.length > 1) {\r\n        imagesArray.forEach((el, index) => {\r\n            imagesPromiseArray.push(createImage(imagesArray[index].url, modalImageInner));\r\n        });\r\n        Promise.all(imagesPromiseArray)\r\n        .then(() => {\r\n            loader.classList.remove(\"show\");\r\n            openModal('.modal');\r\n            slider(imagesArray);\r\n        });\r\n    } else {\r\n        createImage(imagesArray[0].url, modalImageInner)\r\n        .then(() => {\r\n            modalImageInner.style.transform = 'none';\r\n            nextButton.classList.add(\"hide\");\r\n            backButton.classList.add(\"hide\");\r\n            loader.classList.remove(\"show\");\r\n            openModal('.modal');\r\n        });\r\n    }\r\n}\r\n\r\nexport {renderPoints, renderImageModal};","function slider(imagesArray) {\r\n    const width = window.getComputedStyle(document.querySelector(\".modal__image-wrapper\")).width,\r\n          nextButton = document.querySelector(\".modal__next\"),\r\n          backButton = document.querySelector(\".modal__back\"),\r\n          modalImageInner = document.querySelector(\".modal__image-inner\"),\r\n          modalDate = document.querySelector(\".modal__date\");\r\n\r\n    nextButton.classList.remove(\"hide\");\r\n    backButton.classList.remove(\"hide\");\r\n    let offset = +width.slice(0, width.length - 2) * (imagesArray.length - 1);\r\n    let imageId = 0;\r\n    modalImageInner.style.transform = `translateX(-${offset}px)`;\r\n    nextButton.addEventListener(\"click\", () => {\r\n        modalImageInner.style.transition = \"0.5s all\";\r\n        if (+offset.toFixed(1) == +(+width.slice(0, width.length - 2) * (imagesArray.length - 1)).toFixed(1)) {\r\n            offset = 0;\r\n            imageId = imagesArray.length - 1;\r\n        } else {\r\n            offset += +width.slice(0, width.length - 2);\r\n            imageId -= 1;\r\n        }\r\n        \r\n        modalImageInner.style.transform = `translateX(-${offset}px)`;\r\n        modalDate.textContent = imagesArray[imageId].description;\r\n    });\r\n    backButton.addEventListener(\"click\", () => {\r\n        modalImageInner.style.transition = \"0.5s all\";\r\n        if (offset == 0) {\r\n            offset = +width.slice(0, width.length - 2) * (imagesArray.length - 1);\r\n            imageId = 0;\r\n        } else {\r\n            offset -= +width.slice(0, width.length - 2);\r\n            imageId += 1;\r\n        }\r\n\r\n        modalImageInner.style.transform = `translateX(-${offset}px)`;\r\n        modalDate.textContent = imagesArray[imageId].description;\r\n    });\r\n}\r\n\r\nexport default slider;","import {selectPoints, getTable} from './modules/requests';\r\nimport {modalCloseClickTrigger} from './modules/clickTriggers';\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n    selectPoints();\r\n    getTable();\r\n    modalCloseClickTrigger();\r\n});","import { renderPoints } from \"./render\";\r\nimport {mapClickTrigger} from \"./clickTriggers\";\r\n\r\nfunction selectPoints() {\r\n    fetch('select_points.php', {\r\n        method: 'POST'\r\n    })\r\n    .then(data => data.json())\r\n    .then(pointsArray => {\r\n        renderPoints(pointsArray, '.plan');\r\n        mapClickTrigger(pointsArray, '.plan', 'plan__point');\r\n    });\r\n}\r\n\r\nfunction getTable() {\r\n    fetch('get_table.php', {\r\n        method: 'POST'\r\n    })\r\n    .then(data => data.json())\r\n    .then(data => {\r\n        const tbody = document.querySelector(\".main-table\").children[0].children[1];\r\n        data.reverse().forEach((el, index) => {\r\n            // const report = (el.reportBool) ? `<a href=\"#\" data-modal>Открыть</a>` : ``;\r\n            const tr = `<tr>\r\n                            <td>${el.date}</td>\r\n                            <td>${el.numberObject}</td>\r\n                            <td>${el.description}</td>\r\n                            <td>${el.secondName}</td>\r\n                        </tr>`;\r\n            tbody.insertAdjacentHTML('beforeend', tr);\r\n    \r\n            // if (el.reportBool) {\r\n            //     tbody.children[index].children[4].children[0].addEventListener(\"mouseenter\", () => {\r\n            //         modalDialog.createReportDialog();\r\n            //         modalDialog.title.textContent = 'Отчет';\r\n            //         modalDialog.text.textContent = el.reportText;\r\n            //     });\r\n            // }\r\n        });\r\n        //const modalTrigger = document.querySelector('[data-modal]');\r\n    \r\n        //modalTrigger.addEventListener('click', function() {\r\n            //openModal(\".modal\");\r\n        //});\r\n    });\r\n}\r\n\r\nexport {selectPoints, getTable};","import {renderImageModal} from './render';\r\nimport {closeModal} from './modal';\r\n\r\nfunction mapClickTrigger(pointsArray, planSelector, pointSelector) {\r\n    let isAddPoint = false;\r\n    let isUpdatePoint = false;\r\n\r\n    // Функция, которая включает добавление точек на план\r\n    const addPointToggle = () => {\r\n        isAddPoint = (isAddPoint) ? false : true;\r\n        console.log(isAddPoint);\r\n    };\r\n\r\n    // Функция, которая включает обновление точек на плане\r\n    const updatePointToggle = ()=> {\r\n        isUpdatePoint = (isUpdatePoint) ? false : true;\r\n    };\r\n\r\n    const plan = document.querySelector(planSelector);\r\n    plan.addEventListener('click', (event) => {\r\n        const pointId = +event.target.getAttribute(\"data-id\");\r\n        if (isUpdatePoint && (event.target && event.target.className === pointSelector)) {\r\n            event.preventDefault();\r\n            if (confirm(\"Обновить точку?\")) {\r\n                const description = prompt(\"Введите дату фото\", \"Дата съемки: dd.mm.yyyy\");\r\n                const pointImgUrl = prompt(\"Введите путь к фото\", \"images/photo_dd_mm_yy/.jpg\");\r\n                if (description === null || pointImgUrl === null) {\r\n                    return;\r\n                }\r\n                // Продолжить код с обновлением точки\r\n                let formData = new FormData();\r\n                formData.append(\"id\", pointId);\r\n                formData.append(\"description\", description);\r\n                formData.append(\"url\", pointImgUrl);\r\n                fetch('update_point.php', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(data => data.text())\r\n                .then((response) => {\r\n                    if (response === \"1\") {\r\n                        console.log(\"Точка обновлена!\");\r\n                    }\r\n                });\r\n            }\r\n        } else if (isAddPoint && (event.target && event.target.tagName === \"IMG\")) {\r\n            if (confirm(\"Добавить новую точку на план?\")) {\r\n                const top = event.offsetY - 10, left = event.offsetX - 10;\r\n                const pointName = prompt(\"Введите имя для точки\", \"имя точки\");\r\n                const pointTitle = prompt(\"Введите название для фото\", \"название фото\");\r\n                const pointDate = prompt(\"Введите дату фото\",\"Последняя дата съемки: dd.mm.yyyy\");\r\n                const pointImgUrl = prompt(\"Введите путь к фото\",\"images/.jpg\");\r\n                if (pointName === null || pointTitle === null || pointDate === null || pointImgUrl === null) {\r\n                    return;\r\n                }\r\n\r\n                let formData = new FormData();\r\n                formData.append(\"x\", left);\r\n                formData.append(\"y\", top);\r\n                formData.append(\"name\", pointName);\r\n                formData.append(\"title\", pointTitle);\r\n                formData.append(\"date\", pointDate);\r\n                formData.append(\"url\", pointImgUrl);\r\n\r\n                fetch(\"add_point.php\", {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(data => data.text())\r\n                .then((response) => {\r\n                    if (response === \"1\") {\r\n                        console.log(\"Точка добавлена!\");\r\n                        // Добавить data-id из add_points.php\r\n                        plan.insertAdjacentHTML(\r\n                            \"beforeend\",\r\n                            `<div class=\"plan__point\" style=\"top: ${top}px;left: ${left}px\" data-id=\"\">\r\n                                    <span>${pointName}</span>\r\n                                </div>`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (event.target && event.target.className === pointSelector) {\r\n                let formData = new FormData();\r\n                formData.append(\"id\", pointId);\r\n                fetch('select_images_archive.php', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(data => data.json())\r\n                .then(imagesArray => {\r\n                    imagesArray.push({\r\n                        url: pointsArray[pointId-1].url,\r\n                        description: pointsArray[pointId-1].date\r\n                    });\r\n                    renderImageModal(pointsArray, pointId, imagesArray.reverse());\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction modalCloseClickTrigger() {\r\n    const modal = document.querySelector(\".modal\");\r\n    const modalClose = document.querySelector(\".modal__close\");\r\n\r\n    // Закрыть модальное окно, если кликнули на элемент крестик\r\n    modalClose.addEventListener('click', () => closeModal(\".modal\"));\r\n\r\n    // Закрыть модальное окно, если кликнули не на окно\r\n    modal.addEventListener('click', (e) => {\r\n        if (e.target === modal) {\r\n            closeModal(\".modal\");\r\n        }\r\n    });\r\n}\r\n\r\nexport {mapClickTrigger, modalCloseClickTrigger};"],"names":["createImage","src","inner","Promise","resolve","reject","imgDiv","document","createElement","classList","add","prepend","image","onload","setAttribute","openModal","modalSelector","querySelector","closeModal","remove","style","transition","renderImageModal","pointsArray","pointId","imagesArray","modalText","modalTitle","modalDate","modalImageInner","nextButton","backButton","loader","imagesPromiseArray","querySelectorAll","forEach","card","textContent","title","description","width","length","el","index","push","url","all","then","window","getComputedStyle","offset","slice","imageId","transform","addEventListener","toFixed","slider","fetch","method","data","json","planSelector","plan","point","insertAdjacentHTML","y","x","id","name","renderPoints","pointSelector","event","target","getAttribute","className","formData","FormData","append","body","date","reverse","mapClickTrigger","tbody","children","tr","numberObject","secondName","modal","e","modalCloseClickTrigger"],"sourceRoot":""}